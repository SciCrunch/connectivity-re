apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

group = 'bnlp'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url "$buildDir/repo"
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {

    compile 'org.jdom:jdom:2.0.2',
            'commons-cli:commons-cli:1.3.1',
            'org.xerial:sqlite-jdbc:3.8.11.2',
            'edu.stanford.nlp:stanford-corenlp:3.9.2',
            'edu.stanford.nlp:stanford-corenlp:3.9.2:models',
            'org.json:json:20160212',
            'org.slf4j:slf4j-simple:1.7.30',
            'xpp3:xpp3:1.1.4c',
            'org.apache.commons:commons-csv:1.1',
            'org.apache.commons:commons-math3:3.6.1',

            fileTree(dir: 'lib', include: '*.jar')

    testCompile 'junit:junit:4.12'
    'org.hamcrest:hamcrest-all:1.3'
}

allprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    version = "1.0.0"
}

task buildVocabulary(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'bnlp.re.classifier.ddi.Vocabulary'
    if (project.hasProperty('pargs')) {
        args(pargs.split(','))
    }
}


task trainBaseline(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'bnlp.re.classifier.ddi.DDIBaselineRNNTrainer'
    if (project.hasProperty('pargs')) {
        args(pargs.split(','))
    }
}

task trainBiLSTM(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'bnlp.re.classifier.ddi.DDIBiLSTMTrainer'
    if (project.hasProperty('pargs')) {
        args(pargs.split(','))
    }
}

task buildAVVocabulary(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'bnlp.re.classifier.antibody.validation.Vocabulary'
    if (project.hasProperty('pargs')) {
        args(pargs.split(','))
    }
}

task trainAVRE(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'bnlp.re.classifier.antibody.validation.Trainer'
    if (project.hasProperty('pargs')) {
        args(pargs.split(','))
    }
}

task trainAVRE2(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'bnlp.re.classifier.antibody.validation.Trainer2'
    if (project.hasProperty('pargs')) {
        args(pargs.split(','))
    }
}

task runCorpusBuilder(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'bnlp.re.sparc.CorpusBuilder'
    if (project.hasProperty('pargs')) {
        args(pargs.split(','))
    }
}

task runPMCCorpusBuilder(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'bnlp.re.sparc.PMCCorpusBuilder'
    if (project.hasProperty('pargs')) {
        args(pargs.split(','))
    }
}

task runTextBookCorpusBuilder(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'bnlp.re.sparc.TextbookCorpusBuilder'
    if (project.hasProperty('pargs')) {
        args(pargs.split(','))
    }
}